// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: api/pb/inventory/inventory.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	GetProductDetails(ctx context.Context, in *GetProductDetailsRequest, opts ...grpc.CallOption) (*GetProductDetailsResponse, error)
	CheckProductStockQuantity(ctx context.Context, in *CheckProductStockQuantityRequest, opts ...grpc.CallOption) (*CheckProductStockQuantityResponse, error)
	ReduceProductStockQuantity(ctx context.Context, in *ReduceProductStockQuantityRequest, opts ...grpc.CallOption) (*ReduceProductStockQuantityResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetProductDetails(ctx context.Context, in *GetProductDetailsRequest, opts ...grpc.CallOption) (*GetProductDetailsResponse, error) {
	out := new(GetProductDetailsResponse)
	err := c.cc.Invoke(ctx, "/inventorypb.InventoryService/GetProductDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckProductStockQuantity(ctx context.Context, in *CheckProductStockQuantityRequest, opts ...grpc.CallOption) (*CheckProductStockQuantityResponse, error) {
	out := new(CheckProductStockQuantityResponse)
	err := c.cc.Invoke(ctx, "/inventorypb.InventoryService/CheckProductStockQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReduceProductStockQuantity(ctx context.Context, in *ReduceProductStockQuantityRequest, opts ...grpc.CallOption) (*ReduceProductStockQuantityResponse, error) {
	out := new(ReduceProductStockQuantityResponse)
	err := c.cc.Invoke(ctx, "/inventorypb.InventoryService/ReduceProductStockQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	GetProductDetails(context.Context, *GetProductDetailsRequest) (*GetProductDetailsResponse, error)
	CheckProductStockQuantity(context.Context, *CheckProductStockQuantityRequest) (*CheckProductStockQuantityResponse, error)
	ReduceProductStockQuantity(context.Context, *ReduceProductStockQuantityRequest) (*ReduceProductStockQuantityResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) GetProductDetails(context.Context, *GetProductDetailsRequest) (*GetProductDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetails not implemented")
}
func (UnimplementedInventoryServiceServer) CheckProductStockQuantity(context.Context, *CheckProductStockQuantityRequest) (*CheckProductStockQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProductStockQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) ReduceProductStockQuantity(context.Context, *ReduceProductStockQuantityRequest) (*ReduceProductStockQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceProductStockQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventorypb.InventoryService/GetProductDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetProductDetails(ctx, req.(*GetProductDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckProductStockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductStockQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckProductStockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventorypb.InventoryService/CheckProductStockQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckProductStockQuantity(ctx, req.(*CheckProductStockQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReduceProductStockQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceProductStockQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReduceProductStockQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventorypb.InventoryService/ReduceProductStockQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReduceProductStockQuantity(ctx, req.(*ReduceProductStockQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventorypb.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductDetails",
			Handler:    _InventoryService_GetProductDetails_Handler,
		},
		{
			MethodName: "CheckProductStockQuantity",
			Handler:    _InventoryService_CheckProductStockQuantity_Handler,
		},
		{
			MethodName: "ReduceProductStockQuantity",
			Handler:    _InventoryService_ReduceProductStockQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/inventory/inventory.proto",
}
